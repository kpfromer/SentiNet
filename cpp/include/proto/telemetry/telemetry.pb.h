// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/telemetry/telemetry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftelemetry_2ftelemetry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftelemetry_2ftelemetry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftelemetry_2ftelemetry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftelemetry_2ftelemetry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[2] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto;
namespace telemetry {
class telemetry;
class telemetryDefaultTypeInternal;
extern telemetryDefaultTypeInternal _telemetry_default_instance_;
class telemetry_endpoint;
class telemetry_endpointDefaultTypeInternal;
extern telemetry_endpointDefaultTypeInternal
    _telemetry_endpoint_default_instance_;
} // namespace telemetry
PROTOBUF_NAMESPACE_OPEN
template <>
::telemetry::telemetry *
Arena::CreateMaybeMessage<::telemetry::telemetry>(Arena *);
template <>
::telemetry::telemetry_endpoint *
Arena::CreateMaybeMessage<::telemetry::telemetry_endpoint>(Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace telemetry {

// ===================================================================

class telemetry_endpoint
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:telemetry.telemetry.endpoint)
                   */
{
public:
  telemetry_endpoint();
  virtual ~telemetry_endpoint();

  telemetry_endpoint(const telemetry_endpoint &from);
  telemetry_endpoint(telemetry_endpoint &&from) noexcept
      : telemetry_endpoint() {
    *this = ::std::move(from);
  }

  inline telemetry_endpoint &operator=(const telemetry_endpoint &from) {
    CopyFrom(from);
    return *this;
  }
  inline telemetry_endpoint &operator=(telemetry_endpoint &&from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const telemetry_endpoint &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const telemetry_endpoint *internal_default_instance() {
    return reinterpret_cast<const telemetry_endpoint *>(
        &_telemetry_endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(telemetry_endpoint &a, telemetry_endpoint &b) { a.Swap(&b); }
  inline void Swap(telemetry_endpoint *other) {
    if (other == this)
      return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline telemetry_endpoint *New() const final {
    return CreateMaybeMessage<telemetry_endpoint>(nullptr);
  }

  telemetry_endpoint *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<telemetry_endpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const telemetry_endpoint &from);
  void MergeFrom(const telemetry_endpoint &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final;
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(telemetry_endpoint *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.telemetry.endpoint";
  }

private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena *GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void *MaybeArenaPtr() const { return nullptr; }

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto);
    return ::descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumEndpointsFieldNumber = 1,
    kNumMessagesFieldNumber = 2,
  };
  // required int32 num_endpoints = 1;
  bool has_num_endpoints() const;
  void clear_num_endpoints();
  ::PROTOBUF_NAMESPACE_ID::int32 num_endpoints() const;
  void set_num_endpoints(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required int32 num_messages = 2;
  bool has_num_messages() const;
  void clear_num_messages();
  ::PROTOBUF_NAMESPACE_ID::int32 num_messages() const;
  void set_num_messages(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:telemetry.telemetry.endpoint)
private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_endpoints_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_messages_;
  friend struct ::TableStruct_proto_2ftelemetry_2ftelemetry_2eproto;
};
// -------------------------------------------------------------------

class telemetry
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:telemetry.telemetry)
                   */
{
public:
  telemetry();
  virtual ~telemetry();

  telemetry(const telemetry &from);
  telemetry(telemetry &&from) noexcept : telemetry() {
    *this = ::std::move(from);
  }

  inline telemetry &operator=(const telemetry &from) {
    CopyFrom(from);
    return *this;
  }
  inline telemetry &operator=(telemetry &&from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const telemetry &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const telemetry *internal_default_instance() {
    return reinterpret_cast<const telemetry *>(&_telemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(telemetry &a, telemetry &b) { a.Swap(&b); }
  inline void Swap(telemetry *other) {
    if (other == this)
      return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline telemetry *New() const final {
    return CreateMaybeMessage<telemetry>(nullptr);
  }

  telemetry *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<telemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const telemetry &from);
  void MergeFrom(const telemetry &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
#else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) final;
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(telemetry *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "telemetry.telemetry";
  }

private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena *GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void *MaybeArenaPtr() const { return nullptr; }

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto);
    return ::descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef telemetry_endpoint endpoint;

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kPublishersFieldNumber = 3,
    kSubscribersFieldNumber = 4,
    kClientsFieldNumber = 5,
    kServersFieldNumber = 6,
    kTimeAliveFieldNumber = 1,
  };
  // required string description = 2;
  bool has_description() const;
  void clear_description();
  const std::string &description() const;
  void set_description(const std::string &value);
  void set_description(std::string &&value);
  void set_description(const char *value);
  void set_description(const char *value, size_t size);
  std::string *mutable_description();
  std::string *release_description();
  void set_allocated_description(std::string *description);

  // required .telemetry.telemetry.endpoint publishers = 3;
  bool has_publishers() const;
  void clear_publishers();
  const ::telemetry::telemetry_endpoint &publishers() const;
  ::telemetry::telemetry_endpoint *release_publishers();
  ::telemetry::telemetry_endpoint *mutable_publishers();
  void set_allocated_publishers(::telemetry::telemetry_endpoint *publishers);

  // required .telemetry.telemetry.endpoint subscribers = 4;
  bool has_subscribers() const;
  void clear_subscribers();
  const ::telemetry::telemetry_endpoint &subscribers() const;
  ::telemetry::telemetry_endpoint *release_subscribers();
  ::telemetry::telemetry_endpoint *mutable_subscribers();
  void set_allocated_subscribers(::telemetry::telemetry_endpoint *subscribers);

  // required .telemetry.telemetry.endpoint clients = 5;
  bool has_clients() const;
  void clear_clients();
  const ::telemetry::telemetry_endpoint &clients() const;
  ::telemetry::telemetry_endpoint *release_clients();
  ::telemetry::telemetry_endpoint *mutable_clients();
  void set_allocated_clients(::telemetry::telemetry_endpoint *clients);

  // required .telemetry.telemetry.endpoint servers = 6;
  bool has_servers() const;
  void clear_servers();
  const ::telemetry::telemetry_endpoint &servers() const;
  ::telemetry::telemetry_endpoint *release_servers();
  ::telemetry::telemetry_endpoint *mutable_servers();
  void set_allocated_servers(::telemetry::telemetry_endpoint *servers);

  // required int64 time_alive = 1;
  bool has_time_alive() const;
  void clear_time_alive();
  ::PROTOBUF_NAMESPACE_ID::int64 time_alive() const;
  void set_time_alive(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:telemetry.telemetry)
private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena
      _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::telemetry::telemetry_endpoint *publishers_;
  ::telemetry::telemetry_endpoint *subscribers_;
  ::telemetry::telemetry_endpoint *clients_;
  ::telemetry::telemetry_endpoint *servers_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_alive_;
  friend struct ::TableStruct_proto_2ftelemetry_2ftelemetry_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// telemetry_endpoint

// required int32 num_endpoints = 1;
inline bool telemetry_endpoint::has_num_endpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void telemetry_endpoint::clear_num_endpoints() {
  num_endpoints_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
telemetry_endpoint::num_endpoints() const {
  // @@protoc_insertion_point(field_get:telemetry.telemetry.endpoint.num_endpoints)
  return num_endpoints_;
}
inline void
telemetry_endpoint::set_num_endpoints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  num_endpoints_ = value;
  // @@protoc_insertion_point(field_set:telemetry.telemetry.endpoint.num_endpoints)
}

// required int32 num_messages = 2;
inline bool telemetry_endpoint::has_num_messages() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void telemetry_endpoint::clear_num_messages() {
  num_messages_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 telemetry_endpoint::num_messages() const {
  // @@protoc_insertion_point(field_get:telemetry.telemetry.endpoint.num_messages)
  return num_messages_;
}
inline void
telemetry_endpoint::set_num_messages(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_messages_ = value;
  // @@protoc_insertion_point(field_set:telemetry.telemetry.endpoint.num_messages)
}

// -------------------------------------------------------------------

// telemetry

// required int64 time_alive = 1;
inline bool telemetry::has_time_alive() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void telemetry::clear_time_alive() {
  time_alive_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 telemetry::time_alive() const {
  // @@protoc_insertion_point(field_get:telemetry.telemetry.time_alive)
  return time_alive_;
}
inline void telemetry::set_time_alive(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000020u;
  time_alive_ = value;
  // @@protoc_insertion_point(field_set:telemetry.telemetry.time_alive)
}

// required string description = 2;
inline bool telemetry::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void telemetry::clear_description() {
  description_.ClearToEmptyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &telemetry::description() const {
  // @@protoc_insertion_point(field_get:telemetry.telemetry.description)
  return description_.GetNoArena();
}
inline void telemetry::set_description(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:telemetry.telemetry.description)
}
inline void telemetry::set_description(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:telemetry.telemetry.description)
}
inline void telemetry::set_description(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:telemetry.telemetry.description)
}
inline void telemetry::set_description(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size));
  // @@protoc_insertion_point(field_set_pointer:telemetry.telemetry.description)
}
inline std::string *telemetry::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:telemetry.telemetry.description)
  return description_.MutableNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string *telemetry::release_description() {
  // @@protoc_insertion_point(field_release:telemetry.telemetry.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void telemetry::set_allocated_description(std::string *description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description);
  // @@protoc_insertion_point(field_set_allocated:telemetry.telemetry.description)
}

// required .telemetry.telemetry.endpoint publishers = 3;
inline bool telemetry::has_publishers() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void telemetry::clear_publishers() {
  if (publishers_ != nullptr)
    publishers_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::telemetry::telemetry_endpoint &telemetry::publishers() const {
  const ::telemetry::telemetry_endpoint *p = publishers_;
  // @@protoc_insertion_point(field_get:telemetry.telemetry.publishers)
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::telemetry::telemetry_endpoint *>(
                   &::telemetry::_telemetry_endpoint_default_instance_);
}
inline ::telemetry::telemetry_endpoint *telemetry::release_publishers() {
  // @@protoc_insertion_point(field_release:telemetry.telemetry.publishers)
  _has_bits_[0] &= ~0x00000002u;
  ::telemetry::telemetry_endpoint *temp = publishers_;
  publishers_ = nullptr;
  return temp;
}
inline ::telemetry::telemetry_endpoint *telemetry::mutable_publishers() {
  _has_bits_[0] |= 0x00000002u;
  if (publishers_ == nullptr) {
    auto *p = CreateMaybeMessage<::telemetry::telemetry_endpoint>(
        GetArenaNoVirtual());
    publishers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:telemetry.telemetry.publishers)
  return publishers_;
}
inline void telemetry::set_allocated_publishers(
    ::telemetry::telemetry_endpoint *publishers) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete publishers_;
  }
  if (publishers) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      publishers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publishers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  publishers_ = publishers;
  // @@protoc_insertion_point(field_set_allocated:telemetry.telemetry.publishers)
}

// required .telemetry.telemetry.endpoint subscribers = 4;
inline bool telemetry::has_subscribers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void telemetry::clear_subscribers() {
  if (subscribers_ != nullptr)
    subscribers_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::telemetry::telemetry_endpoint &telemetry::subscribers() const {
  const ::telemetry::telemetry_endpoint *p = subscribers_;
  // @@protoc_insertion_point(field_get:telemetry.telemetry.subscribers)
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::telemetry::telemetry_endpoint *>(
                   &::telemetry::_telemetry_endpoint_default_instance_);
}
inline ::telemetry::telemetry_endpoint *telemetry::release_subscribers() {
  // @@protoc_insertion_point(field_release:telemetry.telemetry.subscribers)
  _has_bits_[0] &= ~0x00000004u;
  ::telemetry::telemetry_endpoint *temp = subscribers_;
  subscribers_ = nullptr;
  return temp;
}
inline ::telemetry::telemetry_endpoint *telemetry::mutable_subscribers() {
  _has_bits_[0] |= 0x00000004u;
  if (subscribers_ == nullptr) {
    auto *p = CreateMaybeMessage<::telemetry::telemetry_endpoint>(
        GetArenaNoVirtual());
    subscribers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:telemetry.telemetry.subscribers)
  return subscribers_;
}
inline void telemetry::set_allocated_subscribers(
    ::telemetry::telemetry_endpoint *subscribers) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete subscribers_;
  }
  if (subscribers) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscribers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  subscribers_ = subscribers;
  // @@protoc_insertion_point(field_set_allocated:telemetry.telemetry.subscribers)
}

// required .telemetry.telemetry.endpoint clients = 5;
inline bool telemetry::has_clients() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void telemetry::clear_clients() {
  if (clients_ != nullptr)
    clients_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::telemetry::telemetry_endpoint &telemetry::clients() const {
  const ::telemetry::telemetry_endpoint *p = clients_;
  // @@protoc_insertion_point(field_get:telemetry.telemetry.clients)
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::telemetry::telemetry_endpoint *>(
                   &::telemetry::_telemetry_endpoint_default_instance_);
}
inline ::telemetry::telemetry_endpoint *telemetry::release_clients() {
  // @@protoc_insertion_point(field_release:telemetry.telemetry.clients)
  _has_bits_[0] &= ~0x00000008u;
  ::telemetry::telemetry_endpoint *temp = clients_;
  clients_ = nullptr;
  return temp;
}
inline ::telemetry::telemetry_endpoint *telemetry::mutable_clients() {
  _has_bits_[0] |= 0x00000008u;
  if (clients_ == nullptr) {
    auto *p = CreateMaybeMessage<::telemetry::telemetry_endpoint>(
        GetArenaNoVirtual());
    clients_ = p;
  }
  // @@protoc_insertion_point(field_mutable:telemetry.telemetry.clients)
  return clients_;
}
inline void
telemetry::set_allocated_clients(::telemetry::telemetry_endpoint *clients) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clients_;
  }
  if (clients) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clients = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clients, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  clients_ = clients;
  // @@protoc_insertion_point(field_set_allocated:telemetry.telemetry.clients)
}

// required .telemetry.telemetry.endpoint servers = 6;
inline bool telemetry::has_servers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void telemetry::clear_servers() {
  if (servers_ != nullptr)
    servers_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::telemetry::telemetry_endpoint &telemetry::servers() const {
  const ::telemetry::telemetry_endpoint *p = servers_;
  // @@protoc_insertion_point(field_get:telemetry.telemetry.servers)
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::telemetry::telemetry_endpoint *>(
                   &::telemetry::_telemetry_endpoint_default_instance_);
}
inline ::telemetry::telemetry_endpoint *telemetry::release_servers() {
  // @@protoc_insertion_point(field_release:telemetry.telemetry.servers)
  _has_bits_[0] &= ~0x00000010u;
  ::telemetry::telemetry_endpoint *temp = servers_;
  servers_ = nullptr;
  return temp;
}
inline ::telemetry::telemetry_endpoint *telemetry::mutable_servers() {
  _has_bits_[0] |= 0x00000010u;
  if (servers_ == nullptr) {
    auto *p = CreateMaybeMessage<::telemetry::telemetry_endpoint>(
        GetArenaNoVirtual());
    servers_ = p;
  }
  // @@protoc_insertion_point(field_mutable:telemetry.telemetry.servers)
  return servers_;
}
inline void
telemetry::set_allocated_servers(::telemetry::telemetry_endpoint *servers) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete servers_;
  }
  if (servers) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      servers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, servers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  servers_ = servers;
  // @@protoc_insertion_point(field_set_allocated:telemetry.telemetry.servers)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace telemetry

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftelemetry_2ftelemetry_2eproto
