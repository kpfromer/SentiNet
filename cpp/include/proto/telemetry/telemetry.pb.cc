// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/telemetry/telemetry.proto

#include "proto/telemetry/telemetry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftelemetry_2ftelemetry_2eproto ::
    PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
        scc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto;
namespace telemetry {
class telemetry_endpointDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<telemetry_endpoint>
      _instance;
} _telemetry_endpoint_default_instance_;
class telemetryDefaultTypeInternal {
public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<telemetry> _instance;
} _telemetry_default_instance_;
} // namespace telemetry
static void
InitDefaultsscc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::telemetry::_telemetry_default_instance_;
    new (ptr)::telemetry::telemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::telemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1>
    scc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         1,
         InitDefaultsscc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto},
        {
            &scc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto
                 .base,
        }};

static void
InitDefaultsscc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void *ptr = &::telemetry::_telemetry_endpoint_default_instance_;
    new (ptr)::telemetry::telemetry_endpoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::telemetry::telemetry_endpoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0>
    scc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto = {
        {ATOMIC_VAR_INIT(
             ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized),
         0,
         InitDefaultsscc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto},
        {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata
    file_level_metadata_proto_2ftelemetry_2ftelemetry_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const **
    file_level_enum_descriptors_proto_2ftelemetry_2ftelemetry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const *
    *file_level_service_descriptors_proto_2ftelemetry_2ftelemetry_2eproto =
        nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32
    TableStruct_proto_2ftelemetry_2ftelemetry_2eproto::offsets
        [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry_endpoint, _has_bits_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry_endpoint,
                                  _internal_metadata_),
            ~0u, // no _extensions_
            ~0u, // no _oneof_case_
            ~0u, // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry_endpoint,
                                  num_endpoints_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry_endpoint,
                                  num_messages_),
            0,
            1,
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, _has_bits_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, _internal_metadata_),
            ~0u, // no _extensions_
            ~0u, // no _oneof_case_
            ~0u, // no _weak_field_map_
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, time_alive_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, description_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, publishers_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, subscribers_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, clients_),
            PROTOBUF_FIELD_OFFSET(::telemetry::telemetry, servers_),
            5,
            0,
            1,
            2,
            3,
            4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 7, sizeof(::telemetry::telemetry_endpoint)},
        {9, 20, sizeof(::telemetry::telemetry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const *const file_default_instances[] =
    {
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::telemetry::_telemetry_endpoint_default_instance_),
        reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message *>(
            &::telemetry::_telemetry_default_instance_),
};

const char descriptor_table_protodef_proto_2ftelemetry_2ftelemetry_2eproto
    [] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
        "\n\037proto/telemetry/telemetry.proto\022\ttelem"
        "etry\"\264\002\n\ttelemetry\022\022\n\ntime_alive\030\001 "
        "\002(\003\022\023"
        "\n\013description\030\002 \002(\t\0221\n\npublishers\030\003 "
        "\002(\0132"
        "\035.telemetry.telemetry.endpoint\0222\n\013subscr"
        "ibers\030\004 \002(\0132\035.telemetry.telemetry.endpoi"
        "nt\022.\n\007clients\030\005 \002(\0132\035.telemetry.telemetr"
        "y.endpoint\022.\n\007servers\030\006 \002(\0132\035.telemetry."
        "telemetry.endpoint\0327\n\010endpoint\022\025\n\rnum_en"
        "dpoints\030\001 \002(\005\022\024\n\014num_messages\030\002 \002(\005";
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    *const descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_deps[1] = {};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase
    *const descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_sccs[2] = {
        &scc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto.base,
        &scc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag
    descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_once;
static bool descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_initialized =
    false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto = {
        &descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_initialized,
        descriptor_table_protodef_proto_2ftelemetry_2ftelemetry_2eproto,
        "proto/telemetry/telemetry.proto",
        355,
        &descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_once,
        descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_sccs,
        descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto_deps,
        2,
        0,
        schemas,
        file_default_instances,
        TableStruct_proto_2ftelemetry_2ftelemetry_2eproto::offsets,
        file_level_metadata_proto_2ftelemetry_2ftelemetry_2eproto,
        2,
        file_level_enum_descriptors_proto_2ftelemetry_2ftelemetry_2eproto,
        file_level_service_descriptors_proto_2ftelemetry_2ftelemetry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2ftelemetry_2ftelemetry_2eproto =
    (::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(
         &descriptor_table_proto_2ftelemetry_2ftelemetry_2eproto),
     true);
namespace telemetry {

// ===================================================================

void telemetry_endpoint::InitAsDefaultInstance() {}
class telemetry_endpoint::_Internal {
public:
  using HasBits = decltype(std::declval<telemetry_endpoint>()._has_bits_);
  static void set_has_num_endpoints(HasBits *has_bits) { (*has_bits)[0] |= 1u; }
  static void set_has_num_messages(HasBits *has_bits) { (*has_bits)[0] |= 2u; }
};

telemetry_endpoint::telemetry_endpoint()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.telemetry.endpoint)
}
telemetry_endpoint::telemetry_endpoint(const telemetry_endpoint &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_endpoints_, &from.num_endpoints_,
           static_cast<size_t>(reinterpret_cast<char *>(&num_messages_) -
                               reinterpret_cast<char *>(&num_endpoints_)) +
               sizeof(num_messages_));
  // @@protoc_insertion_point(copy_constructor:telemetry.telemetry.endpoint)
}

void telemetry_endpoint::SharedCtor() {
  ::memset(&num_endpoints_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&num_messages_) -
                               reinterpret_cast<char *>(&num_endpoints_)) +
               sizeof(num_messages_));
}

telemetry_endpoint::~telemetry_endpoint() {
  // @@protoc_insertion_point(destructor:telemetry.telemetry.endpoint)
  SharedDtor();
}

void telemetry_endpoint::SharedDtor() {}

void telemetry_endpoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const telemetry_endpoint &telemetry_endpoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_telemetry_endpoint_proto_2ftelemetry_2ftelemetry_2eproto
           .base);
  return *internal_default_instance();
}

void telemetry_endpoint::Clear() {
  // @@protoc_insertion_point(message_clear_start:telemetry.telemetry.endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&num_endpoints_, 0,
             static_cast<size_t>(reinterpret_cast<char *>(&num_messages_) -
                                 reinterpret_cast<char *>(&num_endpoints_)) +
                 sizeof(num_messages_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *telemetry_endpoint::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // required int32 num_endpoints = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        _Internal::set_has_num_endpoints(&has_bits);
        num_endpoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required int32 num_messages = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
        _Internal::set_has_num_messages(&has_bits);
        num_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool telemetry_endpoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                      \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.telemetry.endpoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
    // required int32 num_endpoints = 1;
    case 1: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
        _Internal::set_has_num_endpoints(&_has_bits_);
        DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
             ::PROTOBUF_NAMESPACE_ID::int32,
             ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
            input, &num_endpoints_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required int32 num_messages = 2;
    case 2: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
        _Internal::set_has_num_messages(&_has_bits_);
        DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
             ::PROTOBUF_NAMESPACE_ID::int32,
             ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
            input, &num_messages_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.telemetry.endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.telemetry.endpoint)
  return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void telemetry_endpoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.telemetry.endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_endpoints = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
        1, this->num_endpoints(), output);
  }

  // required int32 num_messages = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(
        2, this->num_messages(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.telemetry.endpoint)
}

::PROTOBUF_NAMESPACE_ID::uint8 *
telemetry_endpoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.telemetry.endpoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 num_endpoints = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            1, this->num_endpoints(), target);
  }

  // required int32 num_messages = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(
            2, this->num_messages(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.telemetry.endpoint)
  return target;
}

size_t telemetry_endpoint::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:telemetry.telemetry.endpoint)
  size_t total_size = 0;

  if (has_num_endpoints()) {
    // required int32 num_endpoints = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->num_endpoints());
  }

  if (has_num_messages()) {
    // required int32 num_messages = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->num_messages());
  }

  return total_size;
}
size_t telemetry_endpoint::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:telemetry.telemetry.endpoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) ==
      0) { // All required fields are present.
    // required int32 num_endpoints = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->num_endpoints());

    // required int32 num_messages = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
                this->num_messages());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void telemetry_endpoint::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:telemetry.telemetry.endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  const telemetry_endpoint *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<telemetry_endpoint>(
          &from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.telemetry.endpoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.telemetry.endpoint)
    MergeFrom(*source);
  }
}

void telemetry_endpoint::MergeFrom(const telemetry_endpoint &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry.telemetry.endpoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      num_endpoints_ = from.num_endpoints_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_messages_ = from.num_messages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void telemetry_endpoint::CopyFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:telemetry.telemetry.endpoint)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void telemetry_endpoint::CopyFrom(const telemetry_endpoint &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:telemetry.telemetry.endpoint)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool telemetry_endpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003)
    return false;
  return true;
}

void telemetry_endpoint::InternalSwap(telemetry_endpoint *other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_endpoints_, other->num_endpoints_);
  swap(num_messages_, other->num_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata telemetry_endpoint::GetMetadata() const {
  return GetMetadataStatic();
}

// ===================================================================

void telemetry::InitAsDefaultInstance() {
  ::telemetry::_telemetry_default_instance_._instance.get_mutable()
      ->publishers_ = const_cast<::telemetry::telemetry_endpoint *>(
      ::telemetry::telemetry_endpoint::internal_default_instance());
  ::telemetry::_telemetry_default_instance_._instance.get_mutable()
      ->subscribers_ = const_cast<::telemetry::telemetry_endpoint *>(
      ::telemetry::telemetry_endpoint::internal_default_instance());
  ::telemetry::_telemetry_default_instance_._instance.get_mutable()->clients_ =
      const_cast<::telemetry::telemetry_endpoint *>(
          ::telemetry::telemetry_endpoint::internal_default_instance());
  ::telemetry::_telemetry_default_instance_._instance.get_mutable()->servers_ =
      const_cast<::telemetry::telemetry_endpoint *>(
          ::telemetry::telemetry_endpoint::internal_default_instance());
}
class telemetry::_Internal {
public:
  using HasBits = decltype(std::declval<telemetry>()._has_bits_);
  static void set_has_time_alive(HasBits *has_bits) { (*has_bits)[0] |= 32u; }
  static void set_has_description(HasBits *has_bits) { (*has_bits)[0] |= 1u; }
  static const ::telemetry::telemetry_endpoint &
  publishers(const telemetry *msg);
  static void set_has_publishers(HasBits *has_bits) { (*has_bits)[0] |= 2u; }
  static const ::telemetry::telemetry_endpoint &
  subscribers(const telemetry *msg);
  static void set_has_subscribers(HasBits *has_bits) { (*has_bits)[0] |= 4u; }
  static const ::telemetry::telemetry_endpoint &clients(const telemetry *msg);
  static void set_has_clients(HasBits *has_bits) { (*has_bits)[0] |= 8u; }
  static const ::telemetry::telemetry_endpoint &servers(const telemetry *msg);
  static void set_has_servers(HasBits *has_bits) { (*has_bits)[0] |= 16u; }
};

const ::telemetry::telemetry_endpoint &
telemetry::_Internal::publishers(const telemetry *msg) {
  return *msg->publishers_;
}
const ::telemetry::telemetry_endpoint &
telemetry::_Internal::subscribers(const telemetry *msg) {
  return *msg->subscribers_;
}
const ::telemetry::telemetry_endpoint &
telemetry::_Internal::clients(const telemetry *msg) {
  return *msg->clients_;
}
const ::telemetry::telemetry_endpoint &
telemetry::_Internal::servers(const telemetry *msg) {
  return *msg->servers_;
}
telemetry::telemetry()
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:telemetry.telemetry)
}
telemetry::telemetry(const telemetry &from)
    : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        from.description_);
  }
  if (from.has_publishers()) {
    publishers_ = new ::telemetry::telemetry_endpoint(*from.publishers_);
  } else {
    publishers_ = nullptr;
  }
  if (from.has_subscribers()) {
    subscribers_ = new ::telemetry::telemetry_endpoint(*from.subscribers_);
  } else {
    subscribers_ = nullptr;
  }
  if (from.has_clients()) {
    clients_ = new ::telemetry::telemetry_endpoint(*from.clients_);
  } else {
    clients_ = nullptr;
  }
  if (from.has_servers()) {
    servers_ = new ::telemetry::telemetry_endpoint(*from.servers_);
  } else {
    servers_ = nullptr;
  }
  time_alive_ = from.time_alive_;
  // @@protoc_insertion_point(copy_constructor:telemetry.telemetry)
}

void telemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &scc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto.base);
  description_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&publishers_, 0,
           static_cast<size_t>(reinterpret_cast<char *>(&time_alive_) -
                               reinterpret_cast<char *>(&publishers_)) +
               sizeof(time_alive_));
}

telemetry::~telemetry() {
  // @@protoc_insertion_point(destructor:telemetry.telemetry)
  SharedDtor();
}

void telemetry::SharedDtor() {
  description_.DestroyNoArena(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance())
    delete publishers_;
  if (this != internal_default_instance())
    delete subscribers_;
  if (this != internal_default_instance())
    delete clients_;
  if (this != internal_default_instance())
    delete servers_;
}

void telemetry::SetCachedSize(int size) const { _cached_size_.Set(size); }
const telemetry &telemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(
      &::scc_info_telemetry_proto_2ftelemetry_2ftelemetry_2eproto.base);
  return *internal_default_instance();
}

void telemetry::Clear() {
  // @@protoc_insertion_point(message_clear_start:telemetry.telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(publishers_ != nullptr);
      publishers_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(subscribers_ != nullptr);
      subscribers_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(clients_ != nullptr);
      clients_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(servers_ != nullptr);
      servers_->Clear();
    }
  }
  time_alive_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char *telemetry::_InternalParse(
    const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) {
#define CHK_(x)                                                                \
  if (PROTOBUF_PREDICT_FALSE(!(x)))                                            \
  goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
    // required int64 time_alive = 1;
    case 1:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
        _Internal::set_has_time_alive(&has_bits);
        time_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required string description = 2;
    case 2:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
        ptr = ::PROTOBUF_NAMESPACE_ID::internal::
            InlineGreedyStringParserUTF8Verify(
                mutable_description(), ptr, ctx,
                "telemetry.telemetry.description");
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required .telemetry.telemetry.endpoint publishers = 3;
    case 3:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
        ptr = ctx->ParseMessage(mutable_publishers(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required .telemetry.telemetry.endpoint subscribers = 4;
    case 4:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
        ptr = ctx->ParseMessage(mutable_subscribers(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required .telemetry.telemetry.endpoint clients = 5;
    case 5:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
        ptr = ctx->ParseMessage(mutable_clients(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    // required .telemetry.telemetry.endpoint servers = 6;
    case 6:
      if (PROTOBUF_PREDICT_TRUE(
              static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
        ptr = ctx->ParseMessage(mutable_servers(), ptr);
        CHK_(ptr);
      } else
        goto handle_unusual;
      continue;
    default: {
    handle_unusual:
      if ((tag & 7) == 4 || tag == 0) {
        ctx->SetLastTag(tag);
        goto success;
      }
      ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    } // switch
  }   // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool telemetry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream *input) {
#define DO_(EXPRESSION)                                                        \
  if (!PROTOBUF_PREDICT_TRUE(EXPRESSION))                                      \
  goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:telemetry.telemetry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p =
        input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second)
      goto handle_unusual;
    switch (
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(
            tag)) {
    // required int64 time_alive = 1;
    case 1: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
        _Internal::set_has_time_alive(&_has_bits_);
        DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
             ::PROTOBUF_NAMESPACE_ID::int64,
             ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
            input, &time_alive_)));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required string description = 2;
    case 2: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
            input, this->mutable_description()));
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
            VerifyUTF8StringNamedField(
                this->description().data(),
                static_cast<int>(this->description().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
                "telemetry.telemetry.description");
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required .telemetry.telemetry.endpoint publishers = 3;
    case 3: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
            input, mutable_publishers()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required .telemetry.telemetry.endpoint subscribers = 4;
    case 4: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
            input, mutable_subscribers()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required .telemetry.telemetry.endpoint clients = 5;
    case 5: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
            input, mutable_clients()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    // required .telemetry.telemetry.endpoint servers = 6;
    case 6: {
      if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
            input, mutable_servers()));
      } else {
        goto handle_unusual;
      }
      break;
    }

    default: {
    handle_unusual:
      if (tag == 0) {
        goto success;
      }
      DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
      break;
    }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:telemetry.telemetry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:telemetry.telemetry)
  return false;
#undef DO_
}
#endif // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void telemetry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream *output) const {
  // @@protoc_insertion_point(serialize_start:telemetry.telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_alive = 1;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(
        1, this->time_alive(), output);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->description().data(),
        static_cast<int>(this->description().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "telemetry.telemetry.description");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->description(), output);
  }

  // required .telemetry.telemetry.endpoint publishers = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::publishers(this), output);
  }

  // required .telemetry.telemetry.endpoint subscribers = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::subscribers(this), output);
  }

  // required .telemetry.telemetry.endpoint clients = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::clients(this), output);
  }

  // required .telemetry.telemetry.endpoint servers = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::servers(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:telemetry.telemetry)
}

::PROTOBUF_NAMESPACE_ID::uint8 *
telemetry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8 *target) const {
  // @@protoc_insertion_point(serialize_to_array_start:telemetry.telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 time_alive = 1;
  if (cached_has_bits & 0x00000020u) {
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(
            1, this->time_alive(), target);
  }

  // required string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->description().data(),
        static_cast<int>(this->description().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "telemetry.telemetry.description");
    target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
            2, this->description(), target);
  }

  // required .telemetry.telemetry.endpoint publishers = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(3, _Internal::publishers(this), target);
  }

  // required .telemetry.telemetry.endpoint subscribers = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(4, _Internal::subscribers(this), target);
  }

  // required .telemetry.telemetry.endpoint clients = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(5, _Internal::clients(this), target);
  }

  // required .telemetry.telemetry.endpoint servers = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(6, _Internal::servers(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::
        SerializeUnknownFieldsToArray(_internal_metadata_.unknown_fields(),
                                      target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:telemetry.telemetry)
  return target;
}

size_t telemetry::RequiredFieldsByteSizeFallback() const {
  // @@protoc_insertion_point(required_fields_byte_size_fallback_start:telemetry.telemetry)
  size_t total_size = 0;

  if (has_description()) {
    // required string description = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->description());
  }

  if (has_publishers()) {
    // required .telemetry.telemetry.endpoint publishers = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *publishers_);
  }

  if (has_subscribers()) {
    // required .telemetry.telemetry.endpoint subscribers = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *subscribers_);
  }

  if (has_clients()) {
    // required .telemetry.telemetry.endpoint clients = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *clients_);
  }

  if (has_servers()) {
    // required .telemetry.telemetry.endpoint servers = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *servers_);
  }

  if (has_time_alive()) {
    // required int64 time_alive = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->time_alive());
  }

  return total_size;
}
size_t telemetry::ByteSizeLong() const {
  // @@protoc_insertion_point(message_byte_size_start:telemetry.telemetry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
            _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) ==
      0) { // All required fields are present.
    // required string description = 2;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                this->description());

    // required .telemetry.telemetry.endpoint publishers = 3;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *publishers_);

    // required .telemetry.telemetry.endpoint subscribers = 4;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *subscribers_);

    // required .telemetry.telemetry.endpoint clients = 5;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *clients_);

    // required .telemetry.telemetry.endpoint servers = 6;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                *servers_);

    // required int64 time_alive = 1;
    total_size +=
        1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
                this->time_alive());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void telemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_merge_from_start:telemetry.telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const telemetry *source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<telemetry>(&from);
  if (source == nullptr) {
    // @@protoc_insertion_point(generalized_merge_from_cast_fail:telemetry.telemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
    // @@protoc_insertion_point(generalized_merge_from_cast_success:telemetry.telemetry)
    MergeFrom(*source);
  }
}

void telemetry::MergeFrom(const telemetry &from) {
  // @@protoc_insertion_point(class_specific_merge_from_start:telemetry.telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(
          &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_publishers()->::telemetry::telemetry_endpoint::MergeFrom(
          from.publishers());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_subscribers()->::telemetry::telemetry_endpoint::MergeFrom(
          from.subscribers());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_clients()->::telemetry::telemetry_endpoint::MergeFrom(
          from.clients());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_servers()->::telemetry::telemetry_endpoint::MergeFrom(
          from.servers());
    }
    if (cached_has_bits & 0x00000020u) {
      time_alive_ = from.time_alive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void telemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) {
  // @@protoc_insertion_point(generalized_copy_from_start:telemetry.telemetry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

void telemetry::CopyFrom(const telemetry &from) {
  // @@protoc_insertion_point(class_specific_copy_from_start:telemetry.telemetry)
  if (&from == this)
    return;
  Clear();
  MergeFrom(from);
}

bool telemetry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f)
    return false;
  if (has_publishers()) {
    if (!this->publishers_->IsInitialized())
      return false;
  }
  if (has_subscribers()) {
    if (!this->subscribers_->IsInitialized())
      return false;
  }
  if (has_clients()) {
    if (!this->clients_->IsInitialized())
      return false;
  }
  if (has_servers()) {
    if (!this->servers_->IsInitialized())
      return false;
  }
  return true;
}

void telemetry::InternalSwap(telemetry *other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(
      &other->description_,
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  swap(publishers_, other->publishers_);
  swap(subscribers_, other->subscribers_);
  swap(clients_, other->clients_);
  swap(servers_, other->servers_);
  swap(time_alive_, other->time_alive_);
}

::PROTOBUF_NAMESPACE_ID::Metadata telemetry::GetMetadata() const {
  return GetMetadataStatic();
}

// @@protoc_insertion_point(namespace_scope)
} // namespace telemetry
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::telemetry::telemetry_endpoint *
Arena::CreateMaybeMessage<::telemetry::telemetry_endpoint>(Arena *arena) {
  return Arena::CreateInternal<::telemetry::telemetry_endpoint>(arena);
}
template <>
PROTOBUF_NOINLINE ::telemetry::telemetry *
Arena::CreateMaybeMessage<::telemetry::telemetry>(Arena *arena) {
  return Arena::CreateInternal<::telemetry::telemetry>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
